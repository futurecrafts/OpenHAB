import org.openhab.core.library.types.*

rule "LED Light"
when
        Item Light_GF_Living changed
then
        val hsbValue = Light_GF_Living.state as HSBType

        val brightness = hsbValue.brightness.intValue
        val redValue   = ((((hsbValue.red.intValue * 255) / 100) * brightness) / 100).toString
        val greenValue = ((((hsbValue.green.intValue * 255) / 100) * brightness) / 100).toString
        val blueValue  = ((((hsbValue.blue.intValue *255) / 100) * brightness) / 100).toString

        val color = redValue + "," + greenValue + "," + blueValue

        sendCommand( LightColor_GF_Living, color )
end

rule "Servo Ver"
	when
		Item ServoVer_FF_Living received command
	then
		var Number percent = 0
		if(ServoVer_FF_Living.state instanceof DecimalType) percent = ServoVer_FF_Living.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5

		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		postUpdate(ServoVer_FF_Living, percent);
end

rule "Servo Hor"
	when
		Item ServoHor_FF_Living received command
	then
		var Number percent = 0
		if(ServoHor_FF_Living.state instanceof DecimalType) percent = ServoHor_FF_Living.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5

		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		postUpdate(ServoHor_FF_Living, percent);
end

rule "Servo Ver2"
	when
		Item ServoVer_SF_Living received command
	then
		var Number percent = 0
		if(ServoVer_SF_Living.state instanceof DecimalType) percent = ServoVer_SF_Living.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5

		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		postUpdate(ServoVer_SF_Living, percent);
end

rule "Servo Hor2"
	when
		Item ServoHor_SF_Living received command
	then
		var Number percent = 0
		if(ServoHor_SF_Living.state instanceof DecimalType) percent = ServoHor_SF_Living.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5

		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		postUpdate(ServoHor_SF_Living, percent);
end

rule "RFM DHT-Temp threshold"
        when
            Item RF_Temp_OS_Main received update
        then
            if(RF_Temp_OS_Main.state > 25)
            {
                sendCommand(RF_Temp_OS_Main_STS, ON)
            }
			else
			{
			    sendCommand(RF_Temp_OS_Main_STS, OFF)
			}
end

rule "RFM DHT-Temp response"
        when
            Item RF_Temp_OS_Main_STS changed from OFF to ON
        then
            playSound("ding.mp3")
			playSound("doorbell.mp3")
end

rule "RFM Com DHT-Temp threshold"
       when
            Item RFCommon_Temp_OS_Main received update
        then
            if(RFCommon_Temp_OS_Main.state > 25)
            {
                playSound("ding.mp3")
				say("hi hello good morning")
            }
end

rule "RFM GPS location"
when
	Item GPS_long received update
then
    var Number Lat = GPS_lat.state as DecimalType
	Lat = Lat / 1000000.0
	var Number Long = GPS_long.state as DecimalType
	Long = Long / 1000000.0
	Yulia_GPS.postUpdate(Lat.toString + ","+ Long.toString)
	if (( (GPS_long.state < -92.98101)) && (Yulia_GPS_alm_enb.state == ON))
	{
		//say("who let the dog out!")
		if (Yulia_GPS_alm_sta.state==OFF)
		  playSound("ding.mp3")
		
		sendCommand(Yulia_GPS_alm_sta, ON)
	}
end

rule "RFM gas smoke threshold"
        when
                Item RFCommon_Gas_OS_Main received update
        then
                if((RFCommon_Gas_OS_Main.state > 220) && (RFCommon_Gas_OS_Main_Enb.state == ON))
                {
                        sendCommand(RFCommon_Gas_OS_Main_STS, ON)
                }
end

rule "RFM gas smoke response"
        when
                Item RFCommon_Gas_OS_Main_STS changed from OFF to ON
        then
		sendMail("futurecraft2078@gmail.com", "gas / smoke" , "gas or smoke detected")
                playSound("ding.mp3")
                postUpdate(RFCommon_Gas_OS_Main_Time, new DateTimeType())
end

rule "RFM flame threshold"
        when
                Item RFCommon_Flame_OS_Main received update
        then
                if((RFCommon_Flame_OS_Main.state < 900) && (RFCommon_Flame_OS_Main_Enb.state == ON))
                {
                        sendCommand(RFCommon_Flame_OS_Main_STS, ON)
                }
end

rule "RFM flame response"
        when
                Item RFCommon_Flame_OS_Main_STS changed from OFF to ON
        then
                sendMail("futurecraft2078@gmail.com", "fire detected" , "fire detected")
                playSound("ding.mp3")
                postUpdate(RFCommon_Flame_OS_Main_Time, new DateTimeType())
end

rule "RFM Lights"
        when
                Item RFCommon_Light_OS_Main received update
        then
                if(RFCommon_Light_OS_Main.state < 50)
                {
                        sendCommand(RFCommon_Light_OS_Main_STS, OFF)
                }
                else
                {
                        sendCommand(RFCommon_Light_OS_Main_STS, ON)
                }
end

//rule "RFM PIR threshold"
//        when
//                Item RFCommon_PIR_OS_Front received update
//        then
//                if(RFCommon_PIR_OS_Front.state == ON)
//                {
//                        sendCommand(RFCommon_PIR_OS_Front_STS, ON)
//                }
//				else
//				{
//						sendCommand(RFCommon_PIR_OS_Front_STS, OFF)
//				}
//end

rule "RFM PIR response"
        when
                Item RFCommon_PIR_OS_Front_STS changed from OFF to ON
        then
		        if(RFCommon_PIR_OS_Front_Enb.state == ON)
				{
                        sendMail("futurecraft2078@gmail.com", "pir detected" , "dog pired!!!")
						playSound("ding.mp3")
						postUpdate(RFCommon_PIR_OS_Front_Time, new DateTimeType())
				}
end

rule "RFM Reed response"
        when
                Item RFCommon_Reed_OS_Rear_STS changed from OFF to ON
        then
		        if(RFCommon_Reed_OS_Rear_Enb.state == ON)
				{
                        sendMail("futurecraft2078@gmail.com", "Reed detected" , "Reed opened!!!")
						playSound("ding.mp3")
						postUpdate(RFCommon_Reed_OS_Rear_Time, new DateTimeType())
				}
end

rule "RFM Sound response"
        when
                Item RFCommon_Sound_OS_Rear_STS changed from OFF to ON
        then
		        if(RFCommon_Sound_OS_Rear_Enb.state == ON)
				{
						sendMail("futurecraft2078@gmail.com", "Sound detected" , "Sound detected!!!")
						playSound("ding.mp3")
						postUpdate(itm_uber1_bark_time, new DateTimeType())
				}
end

rule "RFM Ultrasound"
		when

				Item RFCommon_Ultra_OS_Garage received update
		then	
				if(RFCommon_Ultra_OS_Garage.state > 150)
				{
						RFCommon_Ultra_OS_Garage_Door.state = OPEN
				}
				else
				{
						RFCommon_Ultra_OS_Garage_Door.state = CLOSED
				}

end

rule "Lamp Test"
		when
				Item Lamp_GF_Kitchen received update
		then
				if(Lamp_GF_Kitchen.state == ON)
				{
						sendMail("futurecraft2078@gmail.com", "Sound detected" , "Sound detected!!!")
						playSound("ding.mp3")
				}
end